//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserSex {
  MAN
  WOMAN
  OTHER
}

enum UserRole {
  CUSTOMER
  DRIVER
  ADMIN
}

enum RideStatus {
  PENDING
  ONGOING
  COMPLETED
}

enum DriverVerificationRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CarType {
  STANDARD
  MINIVAN
}

/// @@auth
/// @@allow('create,read', true)
/// @@allow('update,delete', auth() == this)
model User {
  isNewUser                 Boolean                    @default(true)
  id                        String                     @id() @default(cuid())
  email                     String                     @unique()
  /// @length(min: 3, max: 50)
  name                      String
  mobileNumber              String
  idNumber                  String
  sex                       UserSex
  birthDate                 DateTime
  profileImg                String
  bio                       String
  role                      UserRole                   @default(CUSTOMER)
  driverVerificationRequest DriverVerificationRequest?
  ridesAsDriver             Ride[]                     @relation("RideDriver")
  ridesAsPassenger          Ride[]                     @relation("RidePassenger")
  cars                      Car[]
  userReviewsByMe           UserReview[]               @relation("ReviewAuthor")
  userReviewsAboutMe        UserReview[]               @relation("ReviewReviewee")
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt()
}

model DriverVerificationRequest {
  id            String                          @id() @default(cuid())
  licencePhotos String[]
  selfie        String
  status        DriverVerificationRequestStatus
  driver        User                            @relation(fields: [driverId], references: [id])
  driverId      String                          @unique()
  createdAt     DateTime                        @default(now())
  updatedAt     DateTime                        @updatedAt()
}

model Car {
  id         String   @id() @default(cuid())
  name       String
  type       CarType
  plate      String   @unique()
  /// @allow('read', false)
  mark       String
  capacity   Int
  isVerified Boolean  @default(false)
  photos     String[]
  owner      User     @relation(fields: [ownerId], references: [id])
  ownerId    String
  rides      Ride[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}

model Ride {
  id             String   @id() @default(cuid())
  availableSeats Int
  price          Float
  from           String
  to             String
  departure      DateTime
  distance       Float
  duration       Float
  driver         User     @relation("RideDriver", fields: [driverId], references: [id])
  driverId       String
  passengers     User[]   @relation("RidePassenger")
  rules          Rule[]
  car            Car      @relation(fields: [carId], references: [id])
  carId          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()
}

model Rule {
  id          String   @id() @default(cuid())
  description String
  price       Float
  rides       Ride[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

/// @@allow('read', true)
/// @@allow('create', auth() != null)
/// @@allow('update,delete', auth() == author)
model UserReview {
  id         String   @id() @default(cuid())
  comment    String
  rating     Float
  author     User     @relation("ReviewAuthor", fields: [authorId], references: [id])
  authorId   String
  reviewee   User     @relation("ReviewReviewee", fields: [revieweeId], references: [id])
  revieweeId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}
