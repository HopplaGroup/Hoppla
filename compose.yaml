services:
    # MAIL SERVER
    mailserver:
        image: ghcr.io/docker-mailserver/docker-mailserver:latest
        container_name: mailserver
        hostname: mail.hoppla.ge
        ports:
            - "25:25"
            - "587:587"
            - "465:465"
            - "993:993"
        volumes:
            - ./data/dms/mail-data/:/var/mail/
            - ./data/dms/mail-state/:/var/mail-state/
            - ./data/dms/mail-logs/:/var/log/mail/
            - ./data/dms/config/:/tmp/docker-mailserver/
            - /etc/localtime:/etc/localtime:ro
            - ./data/nginx/certs:/etc/letsencrypt/live:ro
        restart: always
        stop_grace_period: 1m
        environment:
            - ENABLE_FAIL2BAN=1
            - SSL_TYPE=manual
            - SSL_CERT_PATH=/etc/letsencrypt/live/hoppla.ge.pem
            - SSL_KEY_PATH=/etc/letsencrypt/live/hoppla.ge.key
            - PERMIT_DOCKER=network
            - SPOOF_PROTECTION=0
        cap_add:
            - NET_ADMIN
        healthcheck:
            test: "ss --listening --tcp | grep -P 'LISTEN.+:smtp' || exit 1"
            timeout: 3s
            retries: 0
        # --NGINX-------------------------------------
    nginx:
        image: nginx:latest
        container_name: nginx
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./data/nginx/certs:/etc/nginx/certs:ro
        depends_on:
            - next-app
            - umami
            # - backend-app
        restart: always
    # --UNAMI-------------------------------------
    umami:
        image: ghcr.io/umami-software/umami:postgresql-latest
        environment:
            DATABASE_URL: postgresql://umami:umami@umami-db:5432/umami
            DATABASE_TYPE: postgresql
            APP_SECRET: ${UMAMI_SECRET}
            ALLOWED_FRAME_URLS: "https://hoppla.ge/"
        depends_on:
            umami-db:
                condition: service_healthy
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "curl http://localhost:3000/api/heartbeat"]
            interval: 5s
            timeout: 5s
            retries: 5
    umami-db:
        image: postgres:15-alpine
        environment:
            POSTGRES_DB: umami
            POSTGRES_USER: umami
            POSTGRES_PASSWORD: umami
        volumes:
            - ./data/umami-db:/var/lib/postgresql/data
        restart: always
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}",
                ]
            interval: 5s
            timeout: 5s
            retries: 5
    # --BACKEND-------------------------------------
    # backend-app:
    #   container_name: backend-app
    #   build:
    #     context: ./backend
    #   restart: always
    #   depends_on:
    #     postgres:
    #       condition: service_healthy
    #   environment:
    #     DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
    #     NOMINATIM_URL: http://nominatim:8080
    #     ORS_URL: http://ors-app:8082
    #   healthcheck:
    #     test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
    #     interval: 30s
    #     timeout: 10s
    #     retries: 3
    #     start_period: 40s

    # --FRONTEND-------------------------------------
    next-app:
        container_name: next-app
        build:
            context: ./frontend
        restart: always
        depends_on:
            postgres:
                condition: service_healthy
        env_file:
            - frontend.env
        environment:
            DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
            # BACKEND_URL: http://backend-app:3000
            ORS_URL: http://ors-app:8082
        healthcheck:
            test: ["CMD", "wget", "-q0", "http://localhost:3000/api/health"]
            interval: 30s
            timeout: 30s
            retries: 3
            start_period: 5s
    # --MAIN-POSTGRES-------------------------------------
    postgres:
        container_name: postgres-for-next-app
        image: postgres:latest
        restart: always
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            PGDATA: /var/lib/postgresql/data/pgdata
        ports:
            - "5432:5432"
        volumes:
            - ./data/postgres:/var/lib/postgresql/data
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
                ]
            interval: 30s
            timeout: 60s
            retries: 5
            start_period: 80s
    # --NOMINATIM-------------------------------------
    nominatim:
        container_name: nominatim
        image: mediagis/nominatim:4.4
        ports:
            - "8080:8080"
        environment:
            PBF_URL: https://download.geofabrik.de/europe/georgia-latest.osm.pbf
            REPLICATION_URL: https://download.geofabrik.de/europe/georgia-updates/
            NOMINATIM_PASSWORD: ${NOMINATIM_PASSWORD}
        volumes:
            - ./data/nominatim:/var/lib/postgresql/14/main
        shm_size: 1gb
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8080/status.php"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        restart: always
    # --ORS-APP-------------------------------------
    ors-app:
        container_name: ors-app
        image: openrouteservice/openrouteservice:v8.0.0
        ports:
            - "8089:8082"
        environment:
            REBUILD_GRAPHS: False
            CONTAINER_LOG_LEVEL: INFO
            XMS: 1g
            XMX: 2g
            ADDITIONAL_JAVA_OPTS: ""

            ors.engine.source_file: /home/ors/files/georgia-latest.osm.pbf
            ors.engine.profile_default.maximum_distance: 1000000
            # ors.engine.profile_default.maximum_snapping_radius: 4000
            ors.engine.profiles.car.enabled: true
        volumes:
            - ./data/ors-app:/home/ors
        healthcheck:
            test: wget --no-verbose --tries=1 --spider http://localhost:8082/ors/v2/health || exit 1
            start_period: 1m
            interval: 10s
            timeout: 2s
            retries: 3
            disable: false
        restart: always
