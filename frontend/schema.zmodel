generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

plugin zod {
  provider = '@core/zod'
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  output = "./src/lib/hooks"
}

enum UserSex {
  MAN
  WOMAN
  OTHER
}

enum UserRole {
  USER
  ADMIN
}

enum RideStatus {
  ACTIVE
  CANCELLED
}

enum DriverVerificationRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CarType {
  STANDARD
  MINIVAN
}

enum CarStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CarFuelType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
  HYDROGEN
  CNG
  LPG
  ETHANOL
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

abstract model Base {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@deny('all', auth().status == "BLOCKED")
  @@allow('all', auth().role == "ADMIN")
}

model User extends Base {
  isNewUser                 Boolean                     @default(true)

  email                     String                      @unique @email
  name                      String                      @length(min: 1, max: 50)

  mobileNumber              String                      @length(min: 1, max: 30)
  idNumber                  String                      @length(min: 1, max: 30)
  birthDate                 DateTime                    @default(now())
  profileImg                String                      @url
  bio                       String                      @length(min: 1, max: 500)
  sex                       UserSex                     @default(OTHER)
  role                      UserRole                    @default(USER)
  status                    UserStatus                  @default(ACTIVE)
  balance                   Float                       @default(0)

  driverVerificationRequest DriverVerificationRequest?

  ridesAsDriver             Ride[]                      @relation("RideDriver")
  passengerRides            RidePassenger[]
  cars                      Car[]
  userReviewsByMe           UserReview[]                @relation("ReviewAuthor")
  userReviewsAboutMe        UserReview[]                @relation("ReviewReviewee")

  reportsSubmitted          Report[]                    @relation("ReportSubmitter")
  reportsReceived           Report[]                    @relation("ReportedUser")


  notifications             UserNotification[]

  myFavourites              UserUserFavorite[]          @relation("UserFavorites")
  favouritesOfMine          UserUserFavorite[]          @relation("UserFavourites")

  @@index([email])
  @@index([role])
  @@index([status])

  @@auth

  @@allow('create', isNewUser == true && role == "USER" && status == "ACTIVE" && balance == 0)
  @@allow('read', true)
  @@allow('update', auth() == this && future().role == role && future().status == status && future().isNewUser == false && future().balance == balance)
  @@allow('delete', auth() == this)

  a                         UserFavoritedNotification[] @ignore
}

model UserUserFavorite extends Base {
  user       User   @relation("UserFavorites", fields: [userId], references: [id])
  userId     String @default(auth().id)
  favorite   User   @relation("UserFavourites", fields: [favoriteId], references: [id])
  favoriteId String

  @@unique([userId, favoriteId])

  @@allow('create', auth() != null && userId == auth().id && favoriteId != auth().id)
  @@allow('read', true)
  @@allow('update', false)
  @@allow('delete', auth() == user)
}

model Report extends Base {
  submitterId String       @default(auth().id)
  submitter   User         @relation("ReportSubmitter", fields: [submitterId], references: [id])
  reportedId  String
  reported    User         @relation("ReportedUser", fields: [reportedId], references: [id])
  reason      String       @length(min: 3, max: 500)
  description String       @length(min: 3, max: 500)
  status      ReportStatus @default(PENDING)

  @@allow('create', auth() != null && submitterId == auth().id && reportedId != auth().id && status == "PENDING")
  @@allow('read', auth() == submitter)
  @@allow('update', auth() == submitter && status == "PENDING")
  @@allow('delete', auth() == submitter)
}


model UserNotification extends Base {
  readAt DateTime? @allow('update', auth() == user && readAt == null) // Does this work when update is called 
  userId String
  user   User      @relation(fields: [userId], references: [id])
  type   String

  @@delegate(type)

  @@allow('create', false)
  @@allow('read', auth() == user)
  @@allow('update', false)
  @@allow('delete', false)
  // QUESTION: Does this read policy also works for inhereted models?
}

model RideCancelledNotification extends UserNotification {
  reason String
  rideId String
  ride   Ride   @relation(fields: [rideId], references: [id])
}

model UserFavoritedNotification extends UserNotification {
  favouritedBy   User   @relation(fields: [favouritedById], references: [id], onDelete: Cascade)
  favouritedById String
}

model DriverVerificationRequest extends Base {

  licencePhotos String[]                        @length(min: 2, max: 2)

  selfie        String                          @url
  status        DriverVerificationRequestStatus

  driver        User                            @relation(fields: [driverId], references: [id])
  driverId      String                          @unique @default(auth().id)

  @@allow('create', auth() == driver && status == "PENDING")
  @@allow('read', true)
  @@allow('update', auth() == driver && future().driver == driver && future().status == "PENDING")
  @@allow('delete', false)
}

model Car extends Base {

  name          String      @length(min: 1, max: 50)
  type          CarType
  plate         String      @regex('^[A-Z]{2}-\\d{3}-[A-Z]{2}$')
  mark          String      @length(min: 1, max: 50)

  capacity      Int
  status        CarStatus   @default(PENDING)
  photos        String[]    @length(min: 1)
  licensePhotos String[]    @length(min: 2, max: 2)
  fuelType      CarFuelType
  owner         User        @relation(fields: [ownerId], references: [id])
  ownerId       String      @default(auth().id)
  rides         Ride[]

  @@allow('create', auth() == owner && status == "PENDING")
  @@allow('read', true)
  @@allow('update', auth() == owner && future().owner == owner && future().status == "PENDING")
  @@allow('delete', auth() == owner)
}



model Ride extends Base {
  availableSeats Int

  price          Float
  from           String                      @length(min: 1, max: 50)
  to             String                      @length(min: 1, max: 50)
  departure      DateTime
  distance       Float
  duration       Float

  driver         User                        @relation("RideDriver", fields: [driverId], references: [id])
  driverId       String                      @default(auth().id)
  ridePassengers RidePassenger[]
  status         RideStatus                  @default(ACTIVE)
  rideRules      RideRule[]
  car            Car                         @relation(fields: [carId], references: [id])
  carId          String

  @@allow('create', auth() == driver && car.owner == auth() && status == "ACTIVE")
  @@allow('read', true)
  @@allow('update', auth() == driver && car.owner == auth() && future().status == status)
  @@allow('delete', auth() == driver)

  a              RideCancelledNotification[] @ignore
}

model RidePassenger extends Base {
  passenger   User   @relation(fields: [passengerId], references: [id])
  passengerId String @default(auth().id)
  ride        Ride   @relation(fields: [rideId], references: [id])
  rideId      String
  bogOrderId  String

  @@unique([passengerId, rideId])
  @@allow('create', auth() == passenger && ride.driver != auth() && ride.driver.driverVerificationRequest.status == "APPROVED" && ride.car.status == "APPROVED"
  && ride.departure > now() && ride.status == "ACTIVE")
  @@allow('read', true)
  @@allow('update', auth() == passenger && future().passenger == passenger && future().ride == ride && ride.driver != auth())
  @@allow('delete', auth() == passenger)
}


model RideRule extends Base {
  rule   Rule   @relation(fields: [ruleId], references: [id])
  ruleId String
  ride   Ride   @relation(fields: [rideId], references: [id])
  rideId String

  @@unique([ruleId, rideId])
  @@allow('create',  auth() == ride.driver)
  @@allow('read', true)
  @@allow('update', false)
  @@allow('delete', auth() == ride.driver)
}

model Rule extends Base {
  description String
  price       Float
  ruleRides   RideRule[]

  @@allow('create', false)
  @@allow('read', true)
  @@allow('update', false)
  @@allow('delete', false)
}

model UserReview extends Base {
  comment    String @length(min: 1, max: 500)
  rating     Float

  author     User   @relation("ReviewAuthor", fields: [authorId], references: [id])
  authorId   String @default(auth().id)

  reviewee   User   @relation("ReviewReviewee", fields: [revieweeId], references: [id])
  revieweeId String

  @@unique([authorId, revieweeId])

  @@allow('create', auth() == author && auth() != reviewee )
  @@allow('read', true)
  @@allow('update', false)
  @@allow('delete', auth() == author)
}
