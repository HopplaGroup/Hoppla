//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserSex {
  MAN
  WOMAN
  OTHER
}

enum UserRole {
  USER
  ADMIN
}

enum RideStatus {
  ACTIVE
  CANCELLED
}

enum DriverVerificationRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CarType {
  STANDARD
  MINIVAN
}

enum CarStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CarFuelType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
  HYDROGEN
  CNG
  LPG
  ETHANOL
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum RidePassengerRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  UNPAID
}

enum ContactSubmissionStatus {
  NEW
  IN_PROGRESS
  REPLIED
  RESOLVED
  CLOSED
  SPAM
}

enum ContactSubmissionType {
  GENERAL
  SUPPORT
  FEEDBACK
}

/// @@deny('all', auth().status == 'BLOCKED')
/// @@allow('all', auth().role == 'ADMIN')
/// @@auth
/// @@allow('create', isNewUser == true && role == 'USER' && status == 'ACTIVE' && balance == 0 && isUserVerified == false)
/// @@allow('read', true)
/// @@allow('update', auth() == this && future().role == role && future().status == status && future().isNewUser == false && future().balance == balance && future().isUserVerified == isUserVerified)
/// @@allow('delete', auth() == this)
model User {
  id                        String                     @id() @default(cuid())
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt()
  isNewUser                 Boolean                    @default(true)
  /// @email
  email                     String                     @unique()
  /// @length(min: 1, max: 50)
  name                      String
  /// @length(min: 1, max: 30)
  mobileNumber              String                     @default("+995...")
  /// @length(min: 1, max: 30)
  /// @allow('read', auth() == this)
  idNumber                  String                     @default("5900...")
  birthDate                 DateTime                   @default(now())
  /// @url
  profileImg                String
  bio                       String                     @default("")
  sex                       UserSex                    @default(OTHER)
  role                      UserRole                   @default(USER)
  status                    UserStatus                 @default(ACTIVE)
  /// @allow('read', auth() == this)
  balance                   Float                      @default(0)
  /// @allow('read', auth() == this)
  IDPhotos                  String[]
  isUserVerified            Boolean                    @default(false)
  driverVerificationRequest DriverVerificationRequest?
  ridesAsDriver             Ride[]                     @relation("RideDriver")
  passengerRideRequests     RidePassengerRequest[]
  cars                      Car[]
  userReviewsByMe           UserReview[]               @relation("ReviewAuthor")
  userReviewsAboutMe        UserReview[]               @relation("ReviewReviewee")
  rideStartedConfirmations  RideStartedConfirmation[]

  @@index([email])
  @@index([role])
  @@index([status])
}

/// @@deny('all', auth().status == 'BLOCKED')
/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('create', auth() == driver && status == 'PENDING')
/// @@allow('read', true)
/// @@allow('update', auth() == driver && future().driver == driver && future().status == 'PENDING')
/// @@allow('delete', false)
model DriverVerificationRequest {
  id            String                          @id() @default(cuid())
  createdAt     DateTime                        @default(now())
  updatedAt     DateTime                        @updatedAt()
  licencePhotos String[]
  /// @url
  selfie        String
  status        DriverVerificationRequestStatus
  driver        User                            @relation(fields: [driverId], references: [id])
  driverId      String                          @unique()
}

/// @@deny('all', auth().status == 'BLOCKED')
/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('create', auth() == owner)
/// @@allow('read', true)
/// @@allow('update', false)
/// @@allow('delete', auth() == owner)
model Car {
  id            String      @id() @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt()
  /// @length(min: 1, max: 50)
  name          String
  type          CarType
  /// @regex('^[A-Z]{2}-\d{3}-[A-Z]{2}$')
  plate         String
  /// @length(min: 1, max: 50)
  mark          String
  /// @gte(1)
  capacity      Int
  status        CarStatus   @default(APPROVED)
  /// @length(min: 1)
  photos        String[]
  /// @length(min: 2, max: 2)
  licensePhotos String[]
  fuelType      CarFuelType
  owner         User        @relation(fields: [ownerId], references: [id])
  ownerId       String
  rides         Ride[]
  demetre       Int?
}

/// @@deny('all', auth().status == 'BLOCKED')
/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('all', true)
model Ride {
  id                    String                    @id() @default(cuid())
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt()
  availableSeats        Int
  price                 Float
  /// @length(min: 1, max: 50)
  from                  String
  /// @length(min: 1, max: 50)
  to                    String
  departure             DateTime
  distance              Float
  duration              Float
  driver                User                      @relation("RideDriver", fields: [driverId], references: [id])
  driverId              String
  ridePassengerRequests RidePassengerRequest[]
  status                RideStatus                @default(ACTIVE)
  rideRules             RideRule[]
  car                   Car                       @relation(fields: [carId], references: [id])
  carId                 String
  startedConfirmations  RideStartedConfirmation[]
}

/// @@deny('all', auth().status == 'BLOCKED')
/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('all', true)
model RidePassengerRequest {
  id             String                     @id() @default(cuid())
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt()
  passenger      User                       @relation(fields: [passengerId], references: [id])
  passengerId    String
  ride           Ride                       @relation(fields: [rideId], references: [id])
  rideId         String
  bogOrderId     String?
  status         RidePassengerRequestStatus @default(ACCEPTED)
  preferredPrice Float?
  /// @length(min: 1, max: 500)
  description    String?

  @@unique([passengerId, rideId])
}

/// @@deny('all', auth().status == 'BLOCKED')
/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('create', true)
/// @@allow('read', true)
/// @@allow('update', false)
/// @@allow('delete', false)
model RideStartedConfirmation {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ride      Ride     @relation(fields: [rideId], references: [id])
  rideId    String

  @@unique([rideId, userId])
}

/// @@deny('all', auth().status == 'BLOCKED')
/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('create', auth() == ride.driver)
/// @@allow('read', true)
/// @@allow('update', false)
/// @@allow('delete', auth() == ride.driver)
model RideRule {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  rule      Rule     @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  ruleId    String
  ride      Ride     @relation(fields: [rideId], references: [id], onDelete: Cascade)
  rideId    String

  @@unique([ruleId, rideId])
}

/// @@deny('all', auth().status == 'BLOCKED')
/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('create', false)
/// @@allow('read', true)
/// @@allow('update', false)
/// @@allow('delete', false)
model Rule {
  id        String     @id() @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt()
  price     Float
  labels    Json       @default("{ \"en\": \"No Smoking\", \"ka\": \"არ ვეწევით\" }")
  svg       String     @default("")
  ruleRides RideRule[]
}

/// @@deny('all', auth().status == 'BLOCKED')
/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('create', auth() == author && auth() != reviewee)
/// @@allow('read', true)
/// @@allow('update', false)
/// @@allow('delete', auth() == author)
model UserReview {
  id         String   @id() @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  /// @length(min: 1, max: 500)
  comment    String
  /// @gte(0)
  /// @lte(5)
  rating     Float
  author     User     @relation("ReviewAuthor", fields: [authorId], references: [id])
  authorId   String
  reviewee   User     @relation("ReviewReviewee", fields: [revieweeId], references: [id])
  revieweeId String

  @@unique([authorId, revieweeId])
}

/// @@deny('all', auth().status == 'BLOCKED')
/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('create', true)
/// @@allow('read', false)
/// @@allow('update', false)
/// @@allow('delete', false)
model ContactSubmission {
  id        String                  @id() @default(cuid())
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt()
  name      String
  /// @email
  email     String
  message   String
  status    ContactSubmissionStatus @default(NEW)
  type      ContactSubmissionType
}
