// generator zod {
//   provider = "zod-prisma"
//   output   = "./zod" // (default) the directory where generated zod schemas will be saved

//   relationModel = true // (default) Create and export both plain and related models.
//   // relationModel         = "default" // Do not export model without relations.
//   // relationModel         = false // Do not generate related model

//   modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
//   // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

//   modelSuffix = "Schema" // (default) Suffix to apply to your prisma models when naming Zod schemas

//   // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
//   useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

//   // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

//   // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
//   prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
//   // prismaJsonNullability = false // allows null assignment to optional JSON fields
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserSex {
  MAN
  WOMAN
  OTHER
}

enum UserRole {
  CUSTOMER
  DRIVER
  ADMIN
}

enum RideStatus {
  PENDING
  ONGOING
  COMPLETED
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  mobileNumber String
  idNumber     String
  sex          UserSex
  birthDate    DateTime
  rating       Float
  isNewUser    Boolean  @default(true)
  profileImg   String
  bio          String
  role         UserRole @default(CUSTOMER)

  driverVerificationRequest DriverVerificationRequest?

  ridesAsDriver      Ride[]       @relation("RideDriver")
  ridesAsPassenger   Ride[]       @relation("RidePassenger")
  cars               Car[]
  userReviewsByMe    UserReview[] @relation("ReviewAuthor")
  userReviewsAboutMe UserReview[] @relation("ReviewReviewee")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DriverVerificationRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model DriverVerificationRequest {
  id String @id @default(cuid())

  licencePhotos String[]
  licenceNumber String
  selfie        String
  status        DriverVerificationRequestStatus

  driver   User   @relation(fields: [driverId], references: [id])
  driverId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CarType {
  SEDAN
  MINIVAN
}

model Car {
  id String @id @default(cuid())

  name       String
  type       CarType
  color      String
  plate      String   @unique
  mark       String
  year       Int
  capacity   Int
  isVerified Boolean  @default(false)
  photos     String[]

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String
  rides   Ride[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ride {
  id String @id @default(cuid())

  availableSeats Int

  price     Float
  from      String
  to        String
  departure DateTime
  arrival   DateTime
  distance  Float

  driver     User   @relation("RideDriver", fields: [driverId], references: [id])
  driverId   String
  passengers User[] @relation("RidePassenger")
  rules      Rule[]
  car        Car    @relation(fields: [carId], references: [id])
  carId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rule {
  id String @id @default(cuid())

  description String
  price       Float
  ride        Ride   @relation(fields: [rideId], references: [id])
  rideId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserReview {
  id String @id @default(cuid())

  comment String
  rating  Float

  author   User   @relation("ReviewAuthor", fields: [authorId], references: [id])
  authorId String

  reviewee   User   @relation("ReviewReviewee", fields: [revieweeId], references: [id])
  revieweeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
