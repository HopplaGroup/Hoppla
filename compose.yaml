services:
  # --BACKEND-------------------------------------
  backend-app:
    container_name: backend-app
    build:
      context: ./backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      NOMINATIM_URL: http://nominatim:8080
      ORS_URL: http://ors-app:8082
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  # --NGINX-------------------------------------
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./data/nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - next-app
      - backend-app
    restart: always
  # --FRONTEND-------------------------------------
  next-app:
    container_name: next-app
    build:
      context: ./frontend
      args:
        BACKEND_URL: http://backend-app:3000
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      PORT: 3000
      HOSTNAME: "0.0.0.0"
    # healthcheck:
    #   test: ["CMD", "wget", "-q0", "http://localhost:3000/health"]
    #   interval: 30s
    #   timeout: 30s
    #   retries: 3
    #   start_period: 5s
  # --MAIN-POSTGRES-------------------------------------
  postgres:
    container_name: postgres-for-next-app
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
  # --NOMINATIM-------------------------------------
  nominatim:
    container_name: nominatim
    image: mediagis/nominatim:4.4
    ports:
      - "8080:8080"
    environment:
      PBF_URL: https://download.geofabrik.de/europe/georgia-latest.osm.pbf
      REPLICATION_URL: https://download.geofabrik.de/europe/georgia-updates/
      NOMINATIM_PASSWORD: ${NOMINATIM_PASSWORD}
    volumes:
      - ./data/nominatim:/var/lib/postgresql/14/main
    shm_size: 1gb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/status.php"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
  # --ORS-APP-------------------------------------
  ors-app:
    container_name: ors-app
    image: openrouteservice/openrouteservice:v8.0.0
    ports:
      - "8089:8082"
    environment:
      REBUILD_GRAPHS: False
      CONTAINER_LOG_LEVEL: INFO
      XMS: 1g
      XMX: 2g
      ADDITIONAL_JAVA_OPTS: ""

      ors.engine.source_file: /home/ors/files/georgia-latest.osm.pbf
      ors.engine.profile_default.maximum_distance: 1000000
      # ors.engine.profile_default.maximum_snapping_radius: 4000
      ors.engine.profiles.car.enabled: true
    volumes:
      - ./data/ors-app:/home/ors
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8082/ors/v2/health || exit 1
      start_period: 1m
      interval: 10s
      timeout: 2s
      retries: 3
      disable: false
    restart: always
