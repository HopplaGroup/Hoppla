generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

plugin zod {
  provider = '@core/zod'
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  output = "./src/lib/hooks"
}

enum UserSex {
  MAN
  WOMAN
  OTHER
}

enum UserRole {
  USER
  ADMIN
}

enum RideStatus {
  ACTIVE
  CANCELLED
}

enum DriverVerificationRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CarType {
  STANDARD
  MINIVAN
}

enum CarStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CarFuelType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
  HYDROGEN
  CNG
  LPG
  ETHANOL
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

abstract model Base {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@deny('all', auth().status == "BLOCKED")
  @@allow('all', auth().role == "ADMIN")
}

model User extends Base {
  isNewUser                 Boolean                    @default(true)

  email                     String                     @unique @email
  name                      String                     @length(min: 1, max: 50)

  mobileNumber              String                     @default("+995...") @length(min: 1, max: 30)
  idNumber                  String                     @default("5900...") @length(min: 1, max: 30) @allow('read', auth() == this)
  birthDate                 DateTime                   @default(now())
  profileImg                String                     @url
  bio                       String                     @default("")
  sex                       UserSex                    @default(OTHER)
  role                      UserRole                   @default(USER)
  status                    UserStatus                 @default(ACTIVE)
  balance                   Float                      @default(0) @allow('read', auth() == this)
  IDPhotos                  String[]                   @allow('read', auth() == this)
  isUserVerified            Boolean                    @default(false)

  driverVerificationRequest DriverVerificationRequest?

  ridesAsDriver             Ride[]                     @relation("RideDriver")
  passengerRideRequests     RidePassengerRequest[]
  cars                      Car[]
  userReviewsByMe           UserReview[]               @relation("ReviewAuthor")
  userReviewsAboutMe        UserReview[]               @relation("ReviewReviewee")

  @@index([email])
  @@index([role])
  @@index([status])

  @@auth

  @@allow('create', isNewUser == true && role == "USER" && status == "ACTIVE" && balance == 0 && isUserVerified == false)
  @@allow('read', true)
  @@allow('update', auth() == this && future().role == role && future().status == status && future().isNewUser == false && future().balance == balance && future().isUserVerified == isUserVerified)
  @@allow('delete', auth() == this)

  rideStartedConfirmations  RideStartedConfirmation[]
}

model DriverVerificationRequest extends Base {

  licencePhotos String[]

  selfie        String                          @url
  status        DriverVerificationRequestStatus

  driver        User                            @relation(fields: [driverId], references: [id])
  driverId      String                          @unique @default(auth().id)

  @@allow('create', auth() == driver && status == "PENDING")
  @@allow('read', true)
  @@allow('update', auth() == driver && future().driver == driver && future().status == "PENDING")
  @@allow('delete', false)
}

model Car extends Base {

  name          String      @length(min: 1, max: 50)
  type          CarType
  plate         String      @regex('^[A-Z]{2}-\\d{3}-[A-Z]{2}$')
  mark          String      @length(min: 1, max: 50)

  capacity      Int         @gte(1)
  status        CarStatus   @default(APPROVED)
  photos        String[]    @length(min: 1)
  licensePhotos String[]    @length(min: 2, max: 2)
  fuelType      CarFuelType
  owner         User        @relation(fields: [ownerId], references: [id])
  ownerId       String      @default(auth().id)
  rides         Ride[]

  demetre       Int?
  @@allow('create', auth() == owner)
  @@allow('read', true)
  @@allow('update', false)
  @@allow('delete', auth() == owner)
}



model Ride extends Base {
  availableSeats        Int

  price                 Float
  from                  String                    @length(min: 1, max: 50)
  to                    String                    @length(min: 1, max: 50)
  departure             DateTime
  distance              Float
  duration              Float

  driver                User                      @relation("RideDriver", fields: [driverId], references: [id])
  driverId              String                    @default(auth().id)
  ridePassengerRequests RidePassengerRequest[]
  status                RideStatus                @default(ACTIVE)
  rideRules             RideRule[]
  car                   Car                       @relation(fields: [carId], references: [id])
  carId                 String

  // @@allow('create', auth() == driver && car.owner == auth() && status == "ACTIVE")
  // @@allow('read', true)
  // @@allow('update', auth() == driver && car.owner == auth() && status != "CANCELLED" && future().driver == driver && future().car == car)
  // @@allow('delete', auth() == driver)
  @@allow('all', true)

  startedConfirmations  RideStartedConfirmation[]
}

enum RidePassengerRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  UNPAID
}

model RidePassengerRequest extends Base {
  passenger      User                       @relation(fields: [passengerId], references: [id])
  passengerId    String                     @default(auth().id)
  ride           Ride                       @relation(fields: [rideId], references: [id])
  rideId         String
  bogOrderId     String?
  status         RidePassengerRequestStatus @default(ACCEPTED)
  preferredPrice Float?
  description    String?                    @length(min: 1, max: 500)

  @@unique([passengerId, rideId])
  // @@allow('create', auth() == passenger && ride.driver != auth() && ride.driver.driverVerificationRequest.status == "APPROVED" && ride.car.status == "APPROVED"
  // && ride.departure > now() && ride.status == "ACTIVE" && status == "PENDING")
  // @@allow('update', ride.driver == auth() && status == "PENDING" && future().passenger == passenger && future().ride == ride)
  // @@allow('delete', auth() == passenger)
  @@allow('all', true)
}

model RideStartedConfirmation extends Base {
  user   User   @relation(fields: [userId], references: [id])
  userId String @default(auth().id)
  ride   Ride   @relation(fields: [rideId], references: [id])
  rideId String

  @@unique([rideId, userId])
  // @@allow('create', auth() == user && (user == ride.driver || ride.ridePassengers?[passengerId == auth().id] && ride.departure < now()) && ride.status == "ACTIVE")
  @@allow('create', true)
  @@allow('read', true)
  @@allow('update', false)
  @@allow('delete', false)
}


model RideRule extends Base {
  rule   Rule   @relation(fields: [ruleId], references: [id])
  ruleId String
  ride   Ride   @relation(fields: [rideId], references: [id])
  rideId String

  @@unique([ruleId, rideId])
  @@allow('create',  auth() == ride.driver)
  @@allow('read', true)
  @@allow('update', false)
  @@allow('delete', auth() == ride.driver)
}

model Rule extends Base {
  description String
  price       Float
  ruleRides   RideRule[]

  @@allow('create', false)
  @@allow('read', true)
  @@allow('update', false)
  @@allow('delete', false)
}

model UserReview extends Base {
  comment    String @length(min: 1, max: 500)
  rating     Float  @gte(0) @lte(5)

  author     User   @relation("ReviewAuthor", fields: [authorId], references: [id])
  authorId   String @default(auth().id)

  reviewee   User   @relation("ReviewReviewee", fields: [revieweeId], references: [id])
  revieweeId String

  @@unique([authorId, revieweeId])

  @@allow('create', auth() == author && auth() != reviewee )
  @@allow('read', true)
  @@allow('update', false)
  @@allow('delete', auth() == author)
}
