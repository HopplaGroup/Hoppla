services:
  # --UNAMI-------------------------------------
  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    environment:
      DATABASE_URL: postgresql://umami:umami@umami-db:5432/umami
      DATABASE_TYPE: postgresql
      APP_SECRET: ${UMAMI_SECRET}
      ALLOWED_FRAME_URLS: "*"
    depends_on:
      umami-db:
        condition: service_healthy
    restart: always
    ports:
      - "3001:3000"
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000/api/heartbeat"]
      interval: 5s
      timeout: 5s
      retries: 5
  umami-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: umami
      POSTGRES_USER: umami
      POSTGRES_PASSWORD: umami
    volumes:
      - ./data/umami-db:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
  # --FRONTEND-------------------------------------
  next-app:
    container_name: next-app
    build:
      context: ./frontend
      args:
        NEXT_PUBLIC_KINDE_CONNECTION_GOOGLE: ${NEXT_PUBLIC_KINDE_CONNECTION_GOOGLE}
        NEXT_PUBLIC_VAPID_PUBLIC_KEY: ${NEXT_PUBLIC_VAPID_PUBLIC_KEY}
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - frontend.env
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      ORS_URL: http://ors-app:8082
    healthcheck:
      test: ["CMD", "wget", "-q0", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 5s
  # --MAIN-POSTGRES-------------------------------------
  postgres:
    container_name: postgres-for-next-app
    image: postgres:16
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./backups/postgres:/backups
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  postgres-cronjob:
    container_name: postgres-cronjob
    build:
      context: ./postgres-cronjob
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./postgres-cronjob/log:/var/log
      - ./backups/postgres:/backups
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_S3_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_S3_SECRET_ACCESS_KEY}

  # --NOMINATIM-------------------------------------
  nominatim:
    container_name: nominatim
    image: mediagis/nominatim:4.4
    ports:
      - "8080:8080"
    environment:
      PBF_URL: https://download.geofabrik.de/europe/georgia-latest.osm.pbf
      REPLICATION_URL: https://download.geofabrik.de/europe/georgia-updates/
      NOMINATIM_PASSWORD: ${NOMINATIM_PASSWORD}
    volumes:
      - ./data/nominatim:/var/lib/postgresql/14/main
    shm_size: 1gb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/status.php"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
  # --ORS-APP-------------------------------------
  ors-app:
    container_name: ors-app
    image: openrouteservice/openrouteservice:v8.0.0
    ports:
      - "8089:8082"
    environment:
      REBUILD_GRAPHS: False
      CONTAINER_LOG_LEVEL: INFO
      XMS: 1g
      XMX: 2g
      ADDITIONAL_JAVA_OPTS: ""

      ors.engine.source_file: /home/ors/files/georgia-latest.osm.pbf
      ors.engine.profile_default.maximum_distance: 1000000
      # ors.engine.profile_default.maximum_snapping_radius: 4000
      ors.engine.profiles.car.enabled: true
    volumes:
      - ./data/ors-app:/home/ors
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8082/ors/v2/health || exit 1
      start_period: 1m
      interval: 10s
      timeout: 2s
      retries: 3
      disable: false
    restart: always
