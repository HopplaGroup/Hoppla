generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

plugin zod {
  provider = '@core/zod'
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  output = "./src/lib/hooks"
}

enum UserSex {
  MAN
  WOMAN
  OTHER
}

enum UserRole {
  CUSTOMER
  DRIVER
  ADMIN
}

enum RideStatus {
  PENDING
  ONGOING
  COMPLETED
}

model User {
  isNewUser                 Boolean                    @default(true)

  id                        String                     @id @default(cuid())
  email                     String                     @unique
  name                      String                     @length(min: 3, max: 50)

  mobileNumber              String
  idNumber                  String
  sex                       UserSex
  birthDate                 DateTime
  // rating                    Float // Hmm, maybe we should calculate this on the fly
  profileImg                String
  bio                       String
  role                      UserRole                   @default(CUSTOMER)

  driverVerificationRequest DriverVerificationRequest?

  ridesAsDriver             Ride[]                     @relation("RideDriver")
  ridesAsPassenger          Ride[]                     @relation("RidePassenger")
  cars                      Car[]
  userReviewsByMe           UserReview[]               @relation("ReviewAuthor")
  userReviewsAboutMe        UserReview[]               @relation("ReviewReviewee")

  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt

  @@auth
  @@allow('create,read', true)
  @@allow('update,delete', auth() == this)
}

enum DriverVerificationRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model DriverVerificationRequest {
  id            String                          @id @default(cuid())

  licencePhotos String[]
  // licenceNumber String
  selfie        String
  status        DriverVerificationRequestStatus

  driver        User                            @relation(fields: [driverId], references: [id])
  driverId      String                          @unique

  createdAt     DateTime                        @default(now())
  updatedAt     DateTime                        @updatedAt
}

enum CarType {
  STANDARD
  MINIVAN
}

model Car {
  id         String   @id @default(cuid())

  name       String
  type       CarType
  plate      String   @unique
  mark       String   @allow("read", false)
  // year       Int
  capacity   Int
  isVerified Boolean  @default(false)
  photos     String[]

  owner      User     @relation(fields: [ownerId], references: [id])
  ownerId    String
  rides      Ride[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Ride {
  id             String   @id @default(cuid())

  availableSeats Int

  price          Float
  from           String
  to             String
  departure      DateTime
  distance       Float
  duration       Float

  driver         User     @relation("RideDriver", fields: [driverId], references: [id])
  driverId       String
  passengers     User[]   @relation("RidePassenger")
  rules          Rule[]
  car            Car      @relation(fields: [carId], references: [id])
  carId          String

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Rule {
  id          String   @id @default(cuid())

  description String
  price       Float
  rides       Ride[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserReview {
  id         String   @id @default(cuid())

  comment    String
  rating     Float

  author     User     @relation("ReviewAuthor", fields: [authorId], references: [id])
  authorId   String   @default(auth().id)

  reviewee   User     @relation("ReviewReviewee", fields: [revieweeId], references: [id])
  revieweeId String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@allow('read', true)
  @@allow('create', auth() != null)
  @@allow('update,delete', auth() == author)
}
